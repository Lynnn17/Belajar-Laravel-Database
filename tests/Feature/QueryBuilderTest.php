<?php

namespace Tests\Feature;

use Database\Seeders\categorySeeder;
use Database\Seeders\CounterSeeder;
use Illuminate\Database\Query\Builder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;
use function Sodium\increment;

class QueryBuilderTest extends TestCase
{
   protected function setUp(): void
   {
       parent::setUp(); // TODO: Change the autogenerated stub
       DB::delete("delete from products");
       DB::delete("delete from categories");
       DB::delete("delete from counters");

   }

    public function testInsert(): void
    {
       DB::table("categories")->insert([
           "id" => "GADGET",
           "name" => "Gadget"
       ]);

        DB::table("categories")->insert([
            "id" => "FOOD",
            "name" => "Food"
        ]);

        $result = DB::select("select count(id) as total from categories");
        self::assertEquals(2, $result[0]->total);
    }

    public function testSelect()
    {
        $this -> testInsert();

        $collection = DB::table("categories")->select(["id","name"])->get();
        self::assertNotNull($collection);

        $collection->each(function ($item){
            Log::info(json_encode($item));
        });

    }


    public function insertCategories()
    {
    // cara call seeder
    $this->seed(categorySeeder::class);

    }


    public function testWhere()
    {
        $this->insertCategories();

        $collection = DB::table("categories")->where(function (Builder $builder) {
            $builder->where('id', '=', 'SMARTPHONE');
            $builder->orWhere('id', '=', 'LAPTOP');
            // SELECT * FROM categories WHERE (id = smartphone OR id = laptop)
        })->get();

        self::assertCount(2, $collection);
        $collection->each(function ($item) {
            Log::info(json_encode($item));
        });

    }


    public function testWhereBetween()
    {
        $this -> insertCategories();

        $collection = DB::table("categories")
            -> whereBetween("created_at", ["2022-10-10", "2022-11-10"])
            ->get();

        self::assertCount(2, $collection);
        $collection->each(function ($item){
            Log::info(json_encode($item));
        });

    }


    public function testWhereIn()
    {
        $this  -> insertCategories();

        $collection = DB::table("categories")
            -> whereIn("id", ["LAPTOP", "SMARTPHONE"])
            ->get();

        self::assertCount(2, $collection);
        $collection->each(function ($item){
            Log::info(json_encode($item));
        });

    }


    public function testWhereNull()
    {
        $this  -> insertCategories();

        $collection = DB::table("categories")
            -> whereNull("description")
            ->get();

        self::assertCount(3, $collection);
        $collection->each(function ($item){
            Log::info(json_encode($item));
        });

    }

    public function testWhereDate()
    {
        $this->insertCategories();

        $collection = DB::table("categories")
            ->whereDate("created_at", "2022-10-10")->get();
        //        tipe where date yang lain
        //        whereDate(column, value)
        //        whereMonth(column, value)
        //        whereDay(column, value)
        //        whereYear(column, value)
        //        whereTime(column, value)

        self::assertCount(1, $collection);
        $collection->each(function ($item) {
            Log::info(json_encode($item));
        });
    }


    // Update

   public function testUpdate()
   {
       $this -> insertCategories();
        DB::table("categories")->where("id","SMARTPHONE")
                    ->update([
                        "name" => "PotatoPhone",
                        "description" => "Spec Potato Over Price",
                    ]);

        $collection = DB::table("categories")->where("id", "=", "SMARTPHONE")
                        -> get();
        self::assertCount(1, $collection);
        $collection->each(function ($item){
            Log::info(json_encode($item));
        });
   }


   // jika datanya ada maka akan melakukan update jika sebaliknya makan akan melakukan insert

    public function testUpsert()
    {
        DB::table("categories")->updateOrInsert([
            'id' => "VOUCHER"
        ],
        [
            "name" => "Voucher",
            "description" => "Ticket",
            'created_at' => "2022-11-10"
        ]);

        $collection = DB::table("categories")
                    ->where("id", "=", "VOUCHER")
                    ->get();

        self::assertCount(1, $collection );
        $collection->each(function ($item){
            Log::info(json_encode($item));
        });
    }


    // increment (PLUS VALUE)

    public function testIncrement()
    {
        $this->seed(CounterSeeder::class);
        DB::table("counters")->where("id", "=","sample")
                                   ->increment('counter', 1);
        $collection = DB::table("counters")
            ->where('id','=','sample')
            ->get();

        self::assertCount(1, $collection );
        $collection->each(function ($item){
            Log::info(json_encode($item));
        });

    }

    // delete data

    public function testDelete()
    {
        $this->insertCategories();

        DB::table("categories")->where('id', '=', 'VOUCHER')
            ->delete();
        $collection = DB::table("categories")->where('id', '=', 'VOUCHER')
            ->get();


        self::assertCount(0, $collection);
    }


    // inner join

    public function insertProducts()
    {
        $this -> insertCategories();

        DB::table("products")->insert([
            "id" => "1",
            "name" => "Iphone 14 Pro MAX",
            "category_id" => "SMARTPHONE",
            "price" => 25000000
        ]);

        DB::table("products")->insert([
            "id" => "2",
            "name" => "MIUI 14 Pro ",
            "category_id" => "SMARTPHONE",
            "price" => 2500000
        ]);

    }


    // join table

    public function testJoin()
    {
        $this->insertProducts();

        $collection = DB::table("products")
            ->join('categories', 'products.category_id','=','categories.id')
            ->select('products.id','products.name','categories.name as category_name')
            ->get();

        self::assertCount(2, $collection );
        $collection->each(function ($item){
            Log::info(json_encode($item));
        });

    }

    // ordering (pengurutan data)

    public function testOrdering()
    {
        $this -> insertProducts();

        $collection = DB::table("products")->whereNotNull("id")
            ->orderBy("price","desc")
            ->orderBy("name","asc")
            ->get();

        self::assertCount(2, $collection );
        $collection->each(function ($item){
            Log::info(json_encode($item));
        });
    }

    // paging
    // limit menggunakan take
    // skip menggunakan offset

    public function testPaging()
    {
        $this->insertCategories();

        $collection = DB::table("categories")
           // ->skip(2) contoh page 1 skip 0
            ->skip(0)
            ->take(2)
            ->get();

        self::assertCount(2, $collection );
        $collection->each(function ($item){
            Log::info(json_encode($item));
        });

    }

    //load data secara bertahap dengan chunk result

    public function insertManyCategories()
    {
        for ($i = 0; $i < 100; $i++) {
            DB::table("categories")->insert([
                "id" => "CATEGORY-$i",
                "name" => "Category-$i",
                "created_at" => "2022-11-10"
            ]);
        }
    }

    public function testChunk()
    {
        $this->insertManyCategories();

        DB::table("categories")
            ->orderBy('id')
            ->chunk(10, function ($categories){
                self::assertNotNull($categories);
                Log::info("Start Chunk");
                $categories->each(function ($category){
                    Log::info(json_encode($category));
                });
                Log::info("End Chunk");
            });
    }


   // lazy result mengambil data jika di minta

    public function testLazy()
    {
        $this->insertManyCategories();

        $collection = DB::table("categories")
            ->orderBy('id')
            ->lazy(10)
            ->take(3);

        self::assertNotNull($collection);

        $collection->each(function ($item){
            Log::info(json_encode($item));
        });

    }


    // tanpa chunck

    public function testCursor()
    {
        $this->insertManyCategories();

        $collection = DB::table("categories")
            ->orderBy('id')
            ->cursor();

        self::assertNotNull($collection);

        $collection->each(function ($item){
            Log::info(json_encode($item));
        });

    }


    //aggregate untuk MIN MAX SUM dll

    public function testAggregate()
    {
        $this->insertProducts();

        $result = DB::table("products")->count("id");
        self::assertEquals(2, $result);

        $result = DB::table("products")->min("price");
        self::assertEquals(2500000, $result);

        $result = DB::table("products")->max("price");
        self::assertEquals(25000000, $result);

        $result = DB::table("products")->avg("price");
        self::assertEquals(13750000.0000, $result);

        $result = DB::table("products")->sum("price");
        self::assertEquals(27500000, $result);

    }

    // builder raw

    public function testQueryBuilderRow()
    {
        $this->insertProducts();
        $collection = DB::table("products")
            ->select(
                DB::raw("count(id) as total_product"),
                DB::raw("min(price) as min_price"),
                DB::raw("max(price) as max_price"),
            )->get();

        self::assertEquals(2, $collection[0]->total_product);
        self::assertEquals(2500000, $collection[0]->min_price);
        self::assertEquals(25000000, $collection[0]->max_price);

    }

    public function insertProductFood()
    {
        DB::table("products")->insert([
            "id" => "5",
            "name" => "Bakso",
            "category_id" => "FOOD",
            "price" => 20000
        ]);
        DB::table("products")->insert([
            "id" => "6",
            "name" => "Mie Ayam",
            "category_id" => "FOOD",
            "price" => 20000
        ]);
    }

    // query buider grouping

    public function testGroupBy()
    {
        $this->insertProducts();
        $this->insertProductFood();

        $collection = DB::table("products")
            ->select("category_id", DB::raw("count(*) as total_product"))
            ->groupBy("category_id")
            ->orderBy("category_id", "desc")
            ->get();

        self::assertCount(2, $collection);
        self::assertEquals("SMARTPHONE", $collection[0]->category_id);
        self::assertEquals("FOOD", $collection[1]->category_id);
        self::assertEquals(2, $collection[0]->total_product);
        self::assertEquals(2, $collection[1]->total_product);
    }


    //having group by

    public function testGroupByHaving()
    {
        $this->insertProducts();
        $this->insertProductFood();

        $collection = DB::table("products")
            ->select("category_id", DB::raw("count(*) as total_product"))
            ->groupBy("category_id")
            ->having(DB::raw("count(*)"), ">", 2)
            ->orderBy("category_id", "desc")
            ->get();

        self::assertCount(0, $collection);
    }

    // locking

    public function testLocking()
    {
        $this->insertProducts();

        DB::transaction(function (){
           $collection = DB::table("products")
           ->where('id','=','1')
               ->lockForUpdate()
               ->get();

           self::assertCount(1, $collection);
        });
    }



    //pagination

    public function testPagination()
    {
        $this->insertCategories();

        $paginate = DB::table("categories")->paginate(perPage: 2, page: 1);

        self::assertEquals(1, $paginate->currentPage());
        self::assertEquals(2, $paginate->perPage());
        self::assertEquals(2, $paginate->lastPage());
        self::assertEquals(4, $paginate->total());

        $collection = $paginate->items();
        self::assertCount(2, $collection);
        foreach ($collection as $item) {
            Log::info(json_encode($item));
        }
    }

    public function testIterateAllPagination()
    {
        $this->insertCategories();

        $page = 1;

        while (true) {
            $paginate = DB::table("categories")->paginate(perPage: 2, page: $page);

            if ($paginate->isEmpty()) {
                break;
            } else {
                $page++;

                $collection = $paginate->items();
                self::assertCount(2, $collection);
                foreach ($collection as $item) {
                    Log::info(json_encode($item));
                }
            }
        }
    }

    //optimise pagination (Search After) minusnya tidak bisa loncat ke page lain

    public function testCursorPagination()
    {
        $this->insertCategories();

        $cursor = "id";
        while (true) {
            $paginate = DB::table("categories")->orderBy("id")->cursorPaginate(perPage: 2, cursor: $cursor);

            foreach ($paginate->items() as $item) {
                self::assertNotNull($item);
                Log::info(json_encode($item));
            }

            $cursor = $paginate->nextCursor();
            if ($cursor == null) {
                break;
            }
        }

    }






}
